"use strict";(self.webpackChunkvant_for_angular=self.webpackChunkvant_for_angular||[]).push([[734],{734:(c,r,d)=>{d.r(r),d.d(r,{En_USModule:()=>b});var l=d(9808),a=d(2061),s=d(4082),o=d(6435),u=d(8860);const h=a.Bz.forChild([{path:"home",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(4508).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-home"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"quickstart",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(3520).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-quickstart"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"theme",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(3656).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-theme"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"locale",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(176).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-locale"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"button",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(5894).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-button"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"icon",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(5214).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-icon"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"loading",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(8712).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-loading"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"image",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(1157).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-image"]],inputs:{readMe:"readMe"},decls:2,vars:0,template:function(t,i){1&t&&(o.TgZ(0,"p"),o._uU(1," image works!\n"),o.qZA())},styles:[""]}),e})()},{path:"layout",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(7092).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-layout"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"cell",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(9858).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-cell"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"field",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(7575).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-field"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"notify",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(6944).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-notify"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()},{path:"picker",component:(()=>{class e{constructor(){this._readMe=""}set readMe(t){this._readMe=t}get readMe(){return(0,s.K)(this._readMe)}ngOnInit(){this.setReadMe()}setReadMe(){this.readMe=d(8432).Z}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-picker"]],inputs:{readMe:"readMe"},decls:1,vars:1,consts:[[3,"readMe"]],template:function(t,i){1&t&&o._UZ(0,"vant-pc-doc",0),2&t&&o.Q6J("readMe",i.readMe)},directives:[u.K],styles:[""]}),e})()}]);let m=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=o.oAB({type:e}),e.\u0275inj=o.cJS({imports:[[h],a.Bz]}),e})();var g=d(1693);let b=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=o.oAB({type:e}),e.\u0275inj=o.cJS({imports:[[l.ez,m,g.r]]}),e})()},5894:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="button">Button</h1> <h3 id="install">Install</h3> <pre><code class="language-js">import { ButtonModule } from &quot;ngx-vant/button&quot;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="type">Type</h3> <pre><code class="language-html">&lt;van-button type=&quot;primary&quot;&gt;Primary&lt;/van-button&gt;\n&lt;van-button type=&quot;info&quot;&gt;Info&lt;/van-button&gt;\n&lt;van-button type=&quot;default&quot;&gt;Default&lt;/van-button&gt;\n&lt;van-button type=&quot;danger&quot;&gt;Danger&lt;/van-button&gt;\n&lt;van-button type=&quot;warning&quot;&gt;Warning&lt;/van-button&gt;</code></pre> <h3 id="plain">Plain</h3> <pre><code class="language-html">&lt;van-button [plain]=&quot;true&quot; type=&quot;primary&quot;&gt;Primary&lt;/van-button&gt;\n&lt;van-button [plain]=&quot;true&quot; type=&quot;info&quot;&gt;Danger&lt;/van-button&gt;</code></pre> <h3 id="hairline">Hairline</h3> <pre><code class="language-html">&lt;van-button [plain]=&quot;true&quot; [hairline]=&quot;true&quot; type=&quot;primary&quot;\n  &gt;Hairline&lt;/van-button\n&gt;\n&lt;van-button [plain]=&quot;true&quot; [hairline]=&quot;true&quot; type=&quot;info&quot;&gt;Hairline&lt;/van-button&gt;</code></pre> <h3 id="disabled">Disabled</h3> <pre><code class="language-html">&lt;van-button [disabled]=&quot;true&quot; type=&quot;primary&quot;&gt;Diabled&lt;/van-button&gt;\n&lt;van-button [disabled]=&quot;true&quot; type=&quot;info&quot;&gt;Diabled&lt;/van-button&gt;</code></pre> <h3 id="loading">Loading</h3> <pre><code class="language-html">&lt;van-button [loading]=&quot;true&quot; type=&quot;primary&quot; /&gt;\n&lt;van-button [loading]=&quot;true&quot; type=&quot;primary&quot; loadingText=&quot;spinner&quot; /&gt;\n&lt;van-button [loading]=&quot;true&quot; type=&quot;info&quot; loadingText=&quot;Loading...&quot; /&gt;</code></pre> <h3 id="shape">Shape</h3> <pre><code class="language-html">&lt;van-button [square]=&quot;true&quot; type=&quot;primary&quot;&gt;Square&lt;/van-button&gt;\n&lt;van-button [round]=&quot;true&quot; type=&quot;info&quot;&gt;Round&lt;/van-button&gt;</code></pre> <h3 id="icon">Icon</h3> <pre><code class="language-html">&lt;van-button icon=&quot;plus&quot; type=&quot;primary&quot; /&gt;\n&lt;van-button icon=&quot;plus&quot; type=&quot;primary&quot;&gt;Button&lt;/van-button&gt;\n&lt;van-button icon=&quot;https://img.yzcdn.cn/vant/user-active.png&quot; type=&quot;info&quot;&gt;\n  Button\n&lt;/van-button&gt;</code></pre> <h3 id="size">Size</h3> <pre><code class="language-html">&lt;van-button type=&quot;primary&quot; size=&quot;large&quot;&gt;Large&lt;/van-button&gt;\n&lt;van-button type=&quot;primary&quot; size=&quot;normal&quot;&gt;Normal&lt;/van-button&gt;\n&lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;Small&lt;/van-button&gt;\n&lt;van-button type=&quot;primary&quot; size=&quot;mini&quot;&gt;Mini&lt;/van-button&gt;</code></pre> <h3 id="block-element">Block Element</h3> <pre><code class="language-html">&lt;van-button type=&quot;primary&quot; block]=&quot;true&quot;&gt;Block Element&lt;/van-button&gt;</code></pre> <h3 id="route">Route</h3> <pre><code class="language-html">&lt;van-button type=&quot;primary&quot; url=&quot;/vant/mobile.html&quot;&gt;URL&lt;/van-button&gt;\n&lt;van-button type=&quot;primary&quot; to=&quot;index&quot;&gt;Vue Router&lt;/van-button&gt;</code></pre> <h3 id="custom-color">Custom Color</h3> <pre><code class="language-html">&lt;van-button color=&quot;#7232dd&quot;&gt;Pure&lt;/van-button&gt;\n&lt;van-button color=&quot;#7232dd&quot; [plain]=&quot;true&quot;&gt;Pure&lt;/van-button&gt;\n&lt;van-button color=&quot;linear-gradient(to right, #ff6034, #ee0a24)&quot;&gt;\n  Gradient\n&lt;/van-button&gt;</code></pre> <h2 id="api">API</h2> <h3 id="props">Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>type</td> <td>Can be set to <code>primary</code> <code>info</code> <code>warning</code> <code>danger</code></td> <td><em>string</em></td> <td><code>default</code></td> </tr> <tr> <td>size</td> <td>Can be set to <code>large</code> <code>small</code> <code>mini</code></td> <td><em>string</em></td> <td><code>normal</code></td> </tr> <tr> <td>text</td> <td>Text</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>color</td> <td>Color, support linear-gradient</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>icon</td> <td>Left Icon</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>iconPrefix</td> <td>Icon className prefix</td> <td><em>string</em></td> <td><code>van-icon</code></td> </tr> <tr> <td>iconPosition</td> <td>Icon position, can be set to <code>right</code></td> <td><em>string</em></td> <td><code>left</code></td> </tr> <tr> <td>tag</td> <td>HTML Tag</td> <td><em>string</em></td> <td><code>button</code></td> </tr> <tr> <td>native-type</td> <td>Native Type Attribute</td> <td><em>string</em></td> <td><code>&#39;&#39;</code></td> </tr> <tr> <td>plain</td> <td>Whether to be plain button</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>block</td> <td>Whether to set display block</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>round</td> <td>Whether to be round button</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>square</td> <td>Whether to be square button</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>disabled</td> <td>Whether to disable button</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>loading</td> <td>Whether show loading status</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>loadingText</td> <td>Loading text</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>loadingType</td> <td>Loading type, can be set to <code>spinner</code></td> <td><em>string</em></td> <td><code>circular</code></td> </tr> <tr> <td>loadingSize</td> <td>Loading icon size</td> <td><em>string</em></td> <td><code>20px</code></td> </tr> <tr> <td>url</td> <td>Link URL</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>to</td> <td>Target route of the link, same as using vue-router</td> <td><em>string | object</em></td> <td>-</td> </tr> <tr> <td>replace</td> <td>If true, the navigation will not leave a history record</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> </tbody></table> <h3 id="events">Events</h3> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Arguments</th> </tr> </thead> <tbody><tr> <td>click</td> <td>Emitted when button is clicked and not disabled or loading</td> <td><em>event: Event</em></td> </tr> <tr> <td>touchstart</td> <td>Emitted when button is touched</td> <td><em>event: TouchEvent</em></td> </tr> </tbody></table> <h3 id="less-variables">Less Variables</h3> <p>How to use: <a href="#/en-US/theme">Custom Theme</a>.</p> <table> <thead> <tr> <th>Name</th> <th>Default Value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>@button-mini-height</td> <td><code>24px</code></td> <td>-</td> </tr> <tr> <td>@button-mini-font-size</td> <td><code>@font-size-xs</code></td> <td>-</td> </tr> <tr> <td>@button-small-height</td> <td><code>32px</code></td> <td>-</td> </tr> <tr> <td>@button-small-font-size</td> <td><code>@font-size-sm</code></td> <td>-</td> </tr> <tr> <td>@button-normal-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@button-large-height</td> <td><code>50px</code></td> <td>-</td> </tr> <tr> <td>@button-default-height</td> <td><code>44px</code></td> <td>-</td> </tr> <tr> <td>@button-default-line-height</td> <td><code>1.2</code></td> <td>-</td> </tr> <tr> <td>@button-default-font-size</td> <td><code>@font-size-lg</code></td> <td>-</td> </tr> <tr> <td>@button-default-color</td> <td><code>@text-color</code></td> <td>-</td> </tr> <tr> <td>@button-default-background-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@button-default-border-color</td> <td><code>@border-color</code></td> <td>-</td> </tr> <tr> <td>@button-primary-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@button-primary-background-color</td> <td><code>@green</code></td> <td>-</td> </tr> <tr> <td>@button-primary-border-color</td> <td><code>@green</code></td> <td>-</td> </tr> <tr> <td>@button-info-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@button-info-background-color</td> <td><code>@blue</code></td> <td>-</td> </tr> <tr> <td>@button-info-border-color</td> <td><code>@blue</code></td> <td>-</td> </tr> <tr> <td>@button-danger-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@button-danger-background-color</td> <td><code>@red</code></td> <td>-</td> </tr> <tr> <td>@button-danger-border-color</td> <td><code>@red</code></td> <td>-</td> </tr> <tr> <td>@button-warning-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@button-warning-background-color</td> <td><code>@orange</code></td> <td>-</td> </tr> <tr> <td>@button-warning-border-color</td> <td><code>@orange</code></td> <td>-</td> </tr> <tr> <td>@button-border-width</td> <td><code>@border-width-base</code></td> <td>-</td> </tr> <tr> <td>@button-border-radius</td> <td><code>@border-radius-sm</code></td> <td>-</td> </tr> <tr> <td>@button-round-border-radius</td> <td><code>@border-radius-max</code></td> <td>-</td> </tr> <tr> <td>@button-plain-background-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@button-disabled-opacity</td> <td><code>@disabled-opacity</code></td> <td>-</td> </tr> </tbody></table> '},9858:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="cell">Cell</h1> <h3 id="install">Install</h3> <pre><code class="language-js">import CellModule from &#39;ngx-vant/cell&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="basic-usage">Basic Usage</h3> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-cell title=&quot;Cell title&quot; value=&quot;Content&quot; /&gt;\n  &lt;van-cell title=&quot;Cell title&quot; value=&quot;Content&quot; label=&quot;Description&quot; /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="size">Size</h3> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-cell title=&quot;Cell title&quot; value=&quot;Content&quot; size=&quot;large&quot; /&gt;\n  &lt;van-cell\n    title=&quot;Cell title&quot;\n    value=&quot;Content&quot;\n    size=&quot;large&quot;\n    label=&quot;Description&quot;\n  /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="left-icon">Left Icon</h3> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-cell title=&quot;Cell title&quot; icon=&quot;location-o&quot; /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="value-only">Value only</h3> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-cell value=&quot;Content&quot; /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="link">Link</h3> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-cell title=&quot;Cell title&quot; [isLink]=&quot;true&quot; /&gt;\n  &lt;van-cell title=&quot;Cell title&quot; [isLink]=&quot;true&quot; value=&quot;Content&quot; /&gt;\n  &lt;van-cell title=&quot;Cell title&quot; [isLink]=&quot;true&quot; arrow-direction=&quot;down&quot; value=&quot;Content&quot; /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="group-title">Group Title</h3> <pre><code class="language-html">&lt;van-cell-group title=&quot;Group 1&quot;&gt;\n  &lt;van-cell title=&quot;Cell title&quot; value=&quot;Content&quot; /&gt;\n&lt;/van-cell-group&gt;\n&lt;van-cell-group title=&quot;Group 2&quot;&gt;\n  &lt;van-cell title=&quot;Cell title&quot; value=&quot;Content&quot; /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="vertical-center">Vertical Center</h3> <pre><code class="language-html">&lt;van-cell center title=&quot;Cell title&quot; value=&quot;Content&quot; label=&quot;Description&quot; /&gt;</code></pre> <h2 id="api">API</h2> <h3 id="cellgroup-props">CellGroup Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>title</td> <td>Group title</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>border</td> <td>Whether to show outer border</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> </tbody></table> <h3 id="cell-props">Cell Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>title</td> <td>Title</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>value</td> <td>Right text</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>label</td> <td>Description below the title</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>size</td> <td>Size\uff0ccan be set to <code>large</code></td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>icon</td> <td>Left Icon</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>iconPrefix</td> <td>Icon className prefix</td> <td><em>string</em></td> <td><code>van-icon</code></td> </tr> <tr> <td>border</td> <td>Whether to show inner border</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> <tr> <td>center</td> <td>Whether to center content vertically</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> <tr> <td>url</td> <td>Link URL</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>replace</td> <td>If true, the navigation will not leave a history record</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>clickable</td> <td>Whether to show click feedback when clicked</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>isLink</td> <td>Whether to show link icon</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>required</td> <td>Whether to show required mark</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>arrowDirection</td> <td>Can be set to <code>left</code> <code>up</code> <code>down</code></td> <td><em>string</em></td> <td><code>right</code></td> </tr> <tr> <td>titleStyle</td> <td>Title style</td> <td><em>any</em></td> <td>-</td> </tr> <tr> <td>titleClass</td> <td>Title className</td> <td><em>any</em></td> <td>-</td> </tr> <tr> <td>valueClass</td> <td>Value className</td> <td><em>any</em></td> <td>-</td> </tr> <tr> <td>labelClass</td> <td>Label className</td> <td><em>any</em></td> <td>-</td> </tr> </tbody></table> <h3 id="cell-events">Cell Events</h3> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Arguments</th> </tr> </thead> <tbody><tr> <td>click</td> <td>Emitted when cell is clicked</td> <td><em>event: Event</em></td> </tr> </tbody></table> <h3 id="less-variables">Less Variables</h3> <p>How to use: <a href="#/en-US/theme">Custom Theme</a>.</p> <table> <thead> <tr> <th>Name</th> <th>Default Value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>@cell-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@cell-line-height</td> <td><code>24px</code></td> <td>-</td> </tr> <tr> <td>@cell-vertical-padding</td> <td><code>10px</code></td> <td>-</td> </tr> <tr> <td>@cell-horizontal-padding</td> <td><code>@padding-md</code></td> <td>-</td> </tr> <tr> <td>@cell-text-color</td> <td><code>@text-color</code></td> <td>-</td> </tr> <tr> <td>@cell-background-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@cell-border-color</td> <td><code>@border-color</code></td> <td>-</td> </tr> <tr> <td>@cell-active-color</td> <td><code>@active-color</code></td> <td>-</td> </tr> <tr> <td>@cell-required-color</td> <td><code>@red</code></td> <td>-</td> </tr> <tr> <td>@cell-label-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@cell-label-font-size</td> <td><code>@font-size-sm</code></td> <td>-</td> </tr> <tr> <td>@cell-label-line-height</td> <td><code>@line-height-sm</code></td> <td>-</td> </tr> <tr> <td>@cell-label-margin-top</td> <td><code>@padding-base</code></td> <td>-</td> </tr> <tr> <td>@cell-value-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@cell-icon-size</td> <td><code>16px</code></td> <td>-</td> </tr> <tr> <td>@cell-right-icon-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@cell-large-vertical-padding</td> <td><code>@padding-sm</code></td> <td>-</td> </tr> <tr> <td>@cell-large-title-font-size</td> <td><code>@font-size-lg</code></td> <td>-</td> </tr> <tr> <td>@cell-large-label-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@cell-group-background-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@cell-group-title-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@cell-group-title-padding</td> <td><code>@padding-md @padding-md @padding-xs</code></td> <td>-</td> </tr> <tr> <td>@cell-group-title-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@cell-group-title-line-height</td> <td><code>16px</code></td> <td>-</td> </tr> </tbody></table> '},7575:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="field">Field</h1> <h3 id="install">Install</h3> <pre><code class="language-js">import FieldModule from &#39;ngx-vant/field&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="basic-usage">Basic Usage</h3> <p>The value of field is bound with ngModel.</p> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-field [(ngModel)]=&quot;value&quot; label=&quot;Label&quot; placeholder=&quot;Text&quot;&gt;&lt;/van-field&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="custom-type">Custom Type</h3> <p>Use <code>type</code> prop to custom different type fields.</p> <pre><code class="language-html">&lt;van-field [(ngModel)]=&quot;text&quot; label=&quot;Text&quot; /&gt;\n&lt;van-field [(ngModel)]=&quot;tel&quot; type=&quot;tel&quot; label=&quot;Phone&quot; /&gt;\n&lt;van-field [(ngModel)]=&quot;digit&quot; type=&quot;digit&quot; label=&quot;Digit&quot; /&gt;\n&lt;van-field [(ngModel)]=&quot;number&quot; type=&quot;number&quot; label=&quot;Number&quot; /&gt;\n&lt;van-field [(ngModel)]=&quot;password&quot; type=&quot;password&quot; label=&quot;Password&quot; /&gt;</code></pre> <h3 id="disabled">Disabled</h3> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-field label=&quot;Text&quot; value=&quot;Input Readonly&quot; [readonly]=&quot;true&quot;  /&gt;\n  &lt;van-field label=&quot;Text&quot; value=&quot;Input Disabled&quot; [disabled]=&quot;true&quot; /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="show-icon">Show Icon</h3> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-field\n   [(ngModel)]=&quot;value1&quot;\n    label=&quot;Text&quot;\n    leftIcon=&quot;smile-o&quot;\n    rightIcon=&quot;warning-o&quot;\n    placeholder=&quot;Show Icon&quot;\n  /&gt;\n  &lt;van-field\n    [(ngModel)]=&quot;value2&quot;\n    [clearable]=&quot;true&quot;\n    label=&quot;Text&quot;\n    leftIcon=&quot;music-o&quot;\n    placeholder=&quot;Show Clear Icon&quot;\n  /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="error-info">Error Info</h3> <p>Use <code>error</code> or <code>errorMessage</code> to show error info.</p> <pre><code class="language-html">&lt;van-cell-group&gt;\n  &lt;van-field\n    [(ngModel)]=&quot;username&quot;\n    [error]=&quot;true&quot;\n    [required]=&quot;true&quot;\n    label=&quot;Username&quot;\n    placeholder=&quot;Username&quot;\n  /&gt;\n  &lt;van-field\n    [(ngModel)]=&quot;phone&quot;\n    [required]=&quot;true&quot;\n    label=&quot;Phone&quot;\n    placeholder=&quot;Phone&quot;\n    error-message=&quot;Invalid phone&quot;\n  /&gt;\n&lt;/van-cell-group&gt;</code></pre> <h3 id="insert-button">Insert Button</h3> <p>Use button slot to insert button.</p> <pre><code class="language-html">&lt;van-field\n    [(ngModel)]=&quot;sms&quot;\n    [center]=&quot;true&quot;\n    [clearable]=&quot;true&quot;\n    [button]=&quot;button&quot;\n    label=&quot;SMS&quot;\n    placeholder=&quot;SMS&quot;\n&gt;\n    &lt;ng-template #button&gt;\n        &lt;van-button size=&quot;small&quot; type=&quot;primary&quot;&gt;Send SMS&lt;/van-button&gt;\n    &lt;/ng-template&gt;\n&lt;/van-field&gt;</code></pre> <h3 id="show-word-limit">Show Word Limit</h3> <pre><code class="language-html">&lt;van-field\n    [(ngModel)]=&quot;message&quot;\n    rows=&quot;2&quot;\n    label=&quot;Message&quot;\n    type=&quot;textarea&quot;\n    maxlength=&quot;50&quot;\n    placeholder=&quot;Message&quot;\n    [showWordLimit]=&quot;true&quot;\n&gt;&lt;/van-field&gt;</code></pre> <h3 id="input-align">Input Align</h3> <p>Use <code>inputAlign</code> prop to align the input value.</p> <pre><code class="language-html">&lt;van-field\n    [(ngModel)]=&quot;value&quot;\n    label=&quot;Text&quot;\n    placeholder=&quot;Input Align Right&quot;\n    inputAlign=&quot;right&quot;\n&gt;&lt;/van-field&gt;</code></pre> <h2 id="api">API</h2> <h3 id="props">Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>[(ngModel)]</td> <td>Field value</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>label</td> <td>Field label</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>name</td> <td>Name</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>type</td> <td>Input type, can be set to <code>tel</code> <code>digit</code><br><code>number</code> <code>textarea</code> <code>password</code></td> <td><em>string</em></td> <td><code>text</code></td> </tr> <tr> <td>size</td> <td>Size\uff0ccan be set to <code>large</code></td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>maxlength</td> <td>Max length of value</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>placeholder</td> <td>Input placeholder</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>border</td> <td>Whether to show inner border</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> <tr> <td>disabled</td> <td>Whether to disable field</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>readonly</td> <td>Whether to be readonly</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>colon</td> <td>Whether to display colon after label</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>required</td> <td>Whether to show required mark</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>center</td> <td>Whether to center content vertically</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> <tr> <td>clearable</td> <td>Whether to be clearable</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>clearTrigger</td> <td>When to display the clear icon, <code>always</code> means to display the icon when value is not empty, <code>focus</code> means to display the icon when input is focused</td> <td><em>string</em></td> <td><code>focus</code></td> </tr> <tr> <td>clickable</td> <td>Whether to show click feedback when clicked</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>isLink</td> <td>Whether to show link icon</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>autofocus</td> <td>Whether to auto focus, unsupported in iOS</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>showWordLimit</td> <td>Whether to show word limit, need to set the <code>maxlength</code> prop</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>error</td> <td>Whether to show error info</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>errorMessage</td> <td>Error message</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>arrow-direction</td> <td>Can be set to <code>left</code> <code>up</code> <code>down</code></td> <td><em>string</em></td> <td><code>right</code></td> </tr> <tr> <td>label-class</td> <td>Label className</td> <td><em>any</em></td> <td>-</td> </tr> <tr> <td>label-width</td> <td>Label width</td> <td><em>number | string</em></td> <td><code>6.2em</code></td> </tr> <tr> <td>label-align</td> <td>Label align, can be set to <code>center</code> <code>right</code></td> <td><em>string</em></td> <td><code>left</code></td> </tr> <tr> <td>input-align</td> <td>Input align, can be set to <code>center</code> <code>right</code></td> <td><em>string</em></td> <td><code>left</code></td> </tr> <tr> <td>error-message-align</td> <td>Error message align, can be set to <code>center</code> <code>right</code></td> <td><em>string</em></td> <td><code>left</code></td> </tr> <tr> <td>autosize</td> <td>Textarea auto resize\uff0ccan accpet an object,<br>e.g. { maxHeight: 100, minHeight: 50 }</td> <td><em>boolean | object</em></td> <td><code>false</code></td> </tr> <tr> <td>left-icon</td> <td>Left side icon name</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>right-icon</td> <td>Right side icon name</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>icon-prefix</td> <td>Icon className prefix</td> <td><em>string</em></td> <td><code>van-icon</code></td> </tr> <tr> <td>rules</td> <td>Form validation rules</td> <td><em>Rule[]</em></td> <td>-</td> </tr> </tbody></table> <h3 id="events">Events</h3> <p>Field support all native events of input tag</p> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Parameters</th> </tr> </thead> <tbody><tr> <td>input</td> <td>Emitted when input value changed</td> <td><em>value: string</em></td> </tr> <tr> <td>focus</td> <td>Emitted when input is focused</td> <td><em>event: Event</em></td> </tr> <tr> <td>blur</td> <td>Emitted when input is blured</td> <td><em>event: Event</em></td> </tr> <tr> <td>clear</td> <td>Emitted when the clear icon is clicked</td> <td><em>event: Event</em></td> </tr> <tr> <td>click</td> <td>Emitted when component is clicked</td> <td><em>event: Event</em></td> </tr> <tr> <td>clickInput</td> <td>Emitted when the input is clicked</td> <td><em>event: Event</em></td> </tr> <tr> <td>clickRightIcon</td> <td>Emitted when the right icon is clicked</td> <td><em>event: Event</em></td> </tr> </tbody></table> <h3 id="methods">Methods</h3> <table> <thead> <tr> <th>Name</th> <th>Description</th> <th>Attribute</th> <th>Return value</th> </tr> </thead> <tbody><tr> <td>setFocus</td> <td>Trigger input focus</td> <td>-</td> <td>-</td> </tr> <tr> <td>setBlur</td> <td>Trigger input blur</td> <td>-</td> <td>-</td> </tr> </tbody></table> <h3 id="less-variables">Less Variables</h3> <p>How to use: <a href="#/en-US/theme">Custom Theme</a>.</p> <table> <thead> <tr> <th>Name</th> <th>Default Value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>@field-label-width</td> <td><code>6.2em</code></td> <td>-</td> </tr> <tr> <td>@field-label-color</td> <td><code>@gray-7</code></td> <td>-</td> </tr> <tr> <td>@field-label-margin-right</td> <td><code>@padding-sm</code></td> <td>-</td> </tr> <tr> <td>@field-input-text-color</td> <td><code>@text-color</code></td> <td>-</td> </tr> <tr> <td>@field-input-error-text-color</td> <td><code>@red</code></td> <td>-</td> </tr> <tr> <td>@field-input-disabled-text-color</td> <td><code>@gray-5</code></td> <td>-</td> </tr> <tr> <td>@field-placeholder-text-color</td> <td><code>@gray-5</code></td> <td>-</td> </tr> <tr> <td>@field-icon-size</td> <td><code>16px</code></td> <td>-</td> </tr> <tr> <td>@field-clear-icon-size</td> <td><code>16px</code></td> <td>-</td> </tr> <tr> <td>@field-clear-icon-color</td> <td><code>@gray-5</code></td> <td>-</td> </tr> <tr> <td>@field-right-icon-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@field-error-message-color</td> <td><code>@red</code></td> <td>-</td> </tr> <tr> <td>@field-error-message-text-color</td> <td><code>12px</code></td> <td>-</td> </tr> <tr> <td>@field-text-area-min-height</td> <td><code>60px</code></td> <td>-</td> </tr> <tr> <td>@field-word-limit-color</td> <td><code>@gray-7</code></td> <td>-</td> </tr> <tr> <td>@field-word-limit-font-size</td> <td><code>@font-size-sm</code></td> <td>-</td> </tr> <tr> <td>@field-word-limit-line-height</td> <td><code>16px</code></td> <td>-</td> </tr> <tr> <td>@field-disabled-text-color</td> <td><code>@gray-5</code></td> <td>-</td> </tr> </tbody></table> '},4508:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<div class="card"> <div class="van-doc-intro"> <img class="van-doc-intro__logo" style="width:120px;height:120px" src="https://img.yzcdn.cn/vant/logo.png"> <h2 style="margin:0;font-size:36px;line-height:60px">Ngx-Vant</h2> <p>Mobile UI Components built on Angular</p> </div> </div> <h3 id="features">Features</h3> <ul> <li>65+ Reusable components</li> <li>Extensive documentation and demos</li> <li>Support Angular13</li> <li>Support Tree Shaking</li> <li>Support Custom Theme</li> <li>Support i18n</li> <li>Support TS</li> </ul> <h3 id="quickstart">Quickstart</h3> <p>See in <a href="#/en-US/quickstart">Quickstart</a>.</p> <h3 id="contribution">Contribution</h3> <p>Please make sure to read the <a href="#/en-US/contribution">Contributing Guide</a> before making a pull request.</p> <h3 id="browser-support">Browser Support</h3> <p>Modern browsers and Android 4.0+, iOS 8.0+.</p> <h3 id="ecosystem">Ecosystem</h3> <table> <thead> <tr> <th>Project</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><a href="https://github.com/youzan/vant-demo">vant-demo</a></td> <td>Official vant demo collection</td> </tr> <tr> <td><a href="https://github.com/youzan/vant-weapp">vant-weapp</a></td> <td>WeChat MiniProgram UI</td> </tr> <tr> <td><a href="https://github.com/mxdi9i7/vant-react">vant-react</a></td> <td>Vant React (maintained by the community)</td> </tr> <tr> <td><a href="https://github.com/youzan/vant/tree/dev/packages/vant-cli">vant-cli</a></td> <td>Scaffold for UI library</td> </tr> <tr> <td><a href="https://github.com/youzan/vant/tree/dev/packages/vant-icons">vant-icons</a></td> <td>Vant icons</td> </tr> <tr> <td><a href="https://github.com/youzan/vant/tree/dev/packages/vant-touch-emulator">vant-touch-emulator</a></td> <td>Using vant in desktop browsers</td> </tr> </tbody></table> <h3 id="links">Links</h3> <ul> <li><a href="https://github.com/yutao331763646/ngx-vant/issues">Feedback</a></li> </ul> <h3 id="license">LICENSE</h3> <p><a href="https://zh.wikipedia.org/wiki/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89">MIT</a></p> '},5214:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="icon">Icon</h1> <h3 id="install">Install</h3> <pre><code class="language-js">import IconModule from &#39;ngx-vant/icon&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="basic-usage">Basic Usage</h3> <p>Use <code>name</code> prop to set icon name or icon URL.</p> <pre><code class="language-html">&lt;van-icon name=&quot;chat-o&quot; /&gt;\n&lt;van-icon name=&quot;https://b.yzcdn.cn/vant/icon-demo-1126.png&quot; /&gt;</code></pre> <h3 id="show-badge">Show Badge</h3> <p>Use <code>dot</code> prop, a small red dot will be displayed in the upper right corner of the icon.</p> <p>Use <code>badge</code> prop, the badge will be displayed in the upper right corner of the icon.</p> <pre><code class="language-html">&lt;van-icon name=&quot;chat-o&quot; [dot]=&quot;true&quot; /&gt;\n&lt;van-icon name=&quot;chat-o&quot; badge=&quot;9&quot; /&gt;\n&lt;van-icon name=&quot;chat-o&quot; badge=&quot;99+&quot; /&gt;</code></pre> <h3 id="icon-color">Icon Color</h3> <p>Use <code>color</code> prop to set icon color.</p> <pre><code class="language-html">&lt;van-icon name=&quot;chat-o&quot; color=&quot;#1989fa&quot; /&gt;\n&lt;van-icon name=&quot;chat-o&quot; color=&quot;#07c160&quot; /&gt;</code></pre> <h3 id="icon-size">Icon Size</h3> <p>Use <code>size</code> prop to set icon size.</p> <pre><code class="language-html">&lt;van-icon name=&quot;chat-o&quot; size=&quot;40&quot; /&gt;\n&lt;van-icon name=&quot;chat-o&quot; size=&quot;3rem&quot; /&gt;</code></pre> <h3 id="use-local-font-file">Use local font file</h3> <p>Icon uses font file in <code>yzcdn.cn</code> by default\uff0cif you want to use the local font file\uff0cplease import the following css file.</p> <pre><code class="language-js">import &#39;vant/lib/icon/local.css&#39;;</code></pre> <blockquote> <p>Tips: Starting from version 2.10.13, Vant will use local font files in woff2 format by default</p> </blockquote> <h3 id="add-custom-iconfont">Add custom iconfont</h3> <pre><code class="language-css">@font-face {\n  font-family: &#39;my-icon&#39;;\n  src: url(&#39;./my-icon.ttf&#39;) format(&#39;truetype&#39;);\n}\n\n.my-icon {\n  font-family: &#39;my-icon&#39;;\n}\n\n.my-icon-extra::before {\n  content: &#39;\\e626&#39;;\n}</code></pre> <pre><code class="language-html">&lt;van-icon class-prefix=&quot;my-icon&quot; name=&quot;extra&quot; /&gt;</code></pre> <h2 id="api">API</h2> <h3 id="props">Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>name</td> <td>Icon name or URL</td> <td><em>string</em></td> <td><code>&#39;&#39;</code></td> </tr> <tr> <td>dot</td> <td>Whether to show red dot</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>badge</td> <td>Content of the badge</td> <td><em>number | string</em></td> <td><code>&#39;&#39;</code></td> </tr> <tr> <td>color</td> <td>Icon color</td> <td><em>string</em></td> <td><code>inherit</code></td> </tr> <tr> <td>size</td> <td>Icon size</td> <td><em>number | string</em></td> <td><code>inherit</code></td> </tr> <tr> <td>classPrefix</td> <td>ClassName prefix</td> <td><em>string</em></td> <td><code>van-icon</code></td> </tr> </tbody></table> <h3 id="events">Events</h3> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Arguments</th> </tr> </thead> <tbody><tr> <td>click</td> <td>Emitted when icon is clicked</td> <td><em>event: Event</em></td> </tr> </tbody></table> '},1157:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="image">Image</h1> <h3 id="install">Install</h3> <pre><code class="language-js">import ImageModule from &#39;ngx-vant/image&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="basic-usage">Basic Usage</h3> <pre><code class="language-html">&lt;van-image width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot; /&gt;</code></pre> <h3 id="fit-mode">Fit Mode</h3> <pre><code class="language-html">&lt;van-image\n  width=&quot;10rem&quot;\n  height=&quot;10rem&quot;\n  fit=&quot;contain&quot;\n  src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot;\n/&gt;</code></pre> <h3 id="round">Round</h3> <p>Show round image, it may not works at <code>fit=contain</code> and <code>fit=scale-down</code>.</p> <pre><code class="language-html">&lt;van-image\n  [round]=&quot;true&quot;\n  width=&quot;10rem&quot;\n  height=&quot;10rem&quot;\n  src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot;\n/&gt;</code></pre> <h3 id="loading">Loading</h3> <pre><code class="language-html">&lt;van-image\n    width=&quot;10rem&quot;\n    height=&quot;10rem&quot;\n    [showLoading]=&quot;true&quot;\n    src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot;\n    &gt;\n&lt;/van-image&gt;</code></pre> <h3 id="loading-error">Loading Error</h3> <pre><code class="language-html">&lt;van-image\n    width=&quot;10rem&quot;\n    height=&quot;10rem&quot;\n    [showError]=&quot;true&quot;\n    src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot;\n    &gt;\n&lt;/van-image&gt;</code></pre> <h2 id="api">API</h2> <h3 id="props">Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>src</td> <td>Src</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>fit</td> <td>Fit mode</td> <td><em>string</em></td> <td><code>fill</code></td> </tr> <tr> <td>alt</td> <td>Alt</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>width</td> <td>Width</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>height</td> <td>Height</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>radius</td> <td>Border Radius</td> <td><em>number | string</em></td> <td><code>0</code></td> </tr> <tr> <td>round</td> <td>Whether to be round</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>showError</td> <td>Whether to show error placeholder</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> <tr> <td>showLoading</td> <td>Whether to show loading placeholder</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> <tr> <td>errorIcon</td> <td>Error icon</td> <td><em>string</em></td> <td><code>photo-fail</code></td> </tr> <tr> <td>loadingIcon</td> <td>Loading icon</td> <td><em>string</em></td> <td><code>photo</code></td> </tr> </tbody></table> <h3 id="fit-optional-value">fit optional value</h3> <table> <thead> <tr> <th>name</th> <th>desctription</th> </tr> </thead> <tbody><tr> <td>contain</td> <td>Keep aspect ratio, fully display the long side of the image</td> </tr> <tr> <td>cover</td> <td>Keep aspect ratio, fully display the short side of the image, cutting the long side</td> </tr> <tr> <td>fill</td> <td>Stretch and resize image to fill the content box</td> </tr> <tr> <td>none</td> <td>Not resize image</td> </tr> <tr> <td>scale-down</td> <td>Take the smaller of <code>none</code> or <code>contain</code></td> </tr> </tbody></table> <h3 id="events">Events</h3> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Arguments</th> </tr> </thead> <tbody><tr> <td>click</td> <td>Emitted when image is clicked</td> <td><em>event: MouseEvent</em></td> </tr> <tr> <td>load</td> <td>Emitted when image loaded</td> <td><em>event: Event</em></td> </tr> <tr> <td>error</td> <td>Emitted when image load failed</td> <td><em>event: Event</em></td> </tr> </tbody></table> <h3 id="less-variables">Less Variables</h3> <p>How to use: <a href="#/en-US/theme">Custom Theme</a>.</p> <table> <thead> <tr> <th>Name</th> <th>Default Value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>@image-placeholder-text-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@image-placeholder-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@image-placeholder-background-color</td> <td><code>@background-color</code></td> <td>-</td> </tr> <tr> <td>@image-loading-icon-size</td> <td><code>32px</code></td> <td>-</td> </tr> <tr> <td>@image-loading-icon-color</td> <td><code>@gray-4</code></td> <td>-</td> </tr> <tr> <td>@image-error-icon-size</td> <td><code>32px</code></td> <td>-</td> </tr> <tr> <td>@image-error-icon-color</td> <td><code>@gray-4</code></td> <td>-</td> </tr> </tbody></table> '},7092:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="layout">Layout</h1> <h3 id="intro">Intro</h3> <p>Quickly and easily create layouts with <code>van-row</code> and <code>van-col</code>.</p> <h3 id="install">Install</h3> <pre><code class="language-js">import RowModule from &#39;ngx-vant/row&#39;; \nimport ColModule from &#39;ngx-vant/col&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="basic-usage">Basic Usage</h3> <p>Layout are based on 24-column. The attribute <code>span</code> in <code>Col</code> means the number of column the grid spans. Of course, You can use <code>offset</code> attribute to set number of spacing on the left side of the grid.</p> <pre><code class="language-html">&lt;van-row&gt;\n  &lt;van-col span=&quot;8&quot;&gt;span: 8&lt;/van-col&gt;\n  &lt;van-col span=&quot;8&quot;&gt;span: 8&lt;/van-col&gt;\n  &lt;van-col span=&quot;8&quot;&gt;span: 8&lt;/van-col&gt;\n&lt;/van-row&gt;\n\n&lt;van-row&gt;\n  &lt;van-col span=&quot;4&quot;&gt;span: 4&lt;/van-col&gt;\n  &lt;van-col span=&quot;10&quot; offset=&quot;4&quot;&gt;offset: 4, span: 10&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n&lt;/van-row&gt;\n\n&lt;van-row&gt;\n  &lt;van-col offset=&quot;12&quot; span=&quot;12&quot;&gt;offset: 12, span: 12&lt;/van-col&gt;\n&lt;/van-row&gt;</code></pre> <h3 id="column-spacing">Column Spacing</h3> <p>Set grid spacing using <code>gutter</code> attribute. The default value is 0.</p> <pre><code class="language-html">&lt;van-row gutter=&quot;20&quot;&gt;\n  &lt;van-col span=&quot;8&quot;&gt;span: 8&lt;/van-col&gt;\n  &lt;van-col span=&quot;8&quot;&gt;span: 8&lt;/van-col&gt;\n  &lt;van-col span=&quot;8&quot;&gt;span: 8&lt;/van-col&gt;\n&lt;/van-row&gt;</code></pre> <h3 id="flex-layout">Flex Layout</h3> <p>Setting <code>type</code> to <code>flex</code> to enable flex layout.</p> <pre><code class="language-html">&lt;van-row type=&quot;flex&quot;&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n&lt;/van-row&gt;\n\n&lt;van-row type=&quot;flex&quot; justify=&quot;center&quot;&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n&lt;/van-row&gt;\n\n&lt;van-row type=&quot;flex&quot; justify=&quot;end&quot;&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n&lt;/van-row&gt;\n\n&lt;van-row type=&quot;flex&quot; justify=&quot;space-between&quot;&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n&lt;/van-row&gt;\n\n&lt;van-row type=&quot;flex&quot; justify=&quot;space-around&quot;&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n  &lt;van-col span=&quot;6&quot;&gt;span: 6&lt;/van-col&gt;\n&lt;/van-row&gt;</code></pre> <h2 id="api">API</h2> <h3 id="row-props">Row Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>type</td> <td>Layout type, can be set to <code>flex</code></td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>gutter</td> <td>Grid spacing\uff08px\uff09</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>tag</td> <td>Custom element tag</td> <td><em>string</em></td> <td><code>div</code></td> </tr> <tr> <td>justify</td> <td>Flex main axis\uff0ccan be set to end/center/space-around/space-between</td> <td><em>string</em></td> <td><code>start</code></td> </tr> <tr> <td>align</td> <td>Flex cross axis, be set to center/bottom</td> <td><em>string</em></td> <td><code>top</code></td> </tr> </tbody></table> <h3 id="col-props">Col Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>span</td> <td>number of column the grid spans</td> <td><em>number | string</em></td> <td>-</td> </tr> <tr> <td>offset</td> <td>number of spacing on the left side of the grid</td> <td><em>number | string</em></td> <td>-</td> </tr> </tbody></table> <h3 id="row-events">Row Events</h3> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Arguments</th> </tr> </thead> <tbody><tr> <td>click</td> <td>Emitted when the row is clicked</td> <td><em>event: Event</em></td> </tr> </tbody></table> <h3 id="col-events">Col Events</h3> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Arguments</th> </tr> </thead> <tbody><tr> <td>click</td> <td>Emitted when the col is clicked</td> <td><em>event: Event</em></td> </tr> </tbody></table> '},8712:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="loading">Loading</h1> <h3 id="install">Install</h3> <pre><code class="language-js">import LoadingModule from &#39;VantModule/loading&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="type">Type</h3> <pre><code class="language-html">&lt;van-loading /&gt;\n\n&lt;van-loading type=&quot;spinner&quot; /&gt;</code></pre> <h3 id="color">Color</h3> <pre><code class="language-html">&lt;van-loading color=&quot;#1989fa&quot; /&gt;\n\n&lt;van-loading type=&quot;spinner&quot; color=&quot;#1989fa&quot; /&gt;</code></pre> <h3 id="size">Size</h3> <pre><code class="language-html">&lt;van-loading [size]=&quot;24&quot; /&gt;\n\n&lt;van-loading type=&quot;spinner&quot; size=&quot;24px&quot; /&gt;</code></pre> <h3 id="text">Text</h3> <pre><code class="language-html">&lt;van-loading size=&quot;24px&quot;&gt;Loading...&lt;/van-loading&gt;</code></pre> <h3 id="vertical">Vertical</h3> <pre><code class="language-html">&lt;van-loading size=&quot;24px&quot; [vertical]=&#39;true&#39;&gt;Loading...&lt;/van-loading&gt;</code></pre> <h3 id="custom-color">Custom Color</h3> <pre><code class="language-html">&lt;van-loading color=&quot;#0094ff&quot;&gt;Loading...&lt;/van-loading&gt;\n&lt;van-loading textColor=&quot;#0094ff&quot;&gt;Loading...&lt;/van-loading&gt;</code></pre> <h2 id="api">API</h2> <h3 id="props">Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>color</td> <td>Loading color</td> <td><em>string</em></td> <td><code>#c9c9c9</code></td> </tr> <tr> <td>type</td> <td>Can be set to <code>spinner</code></td> <td><em>string</em></td> <td><code>circular</code></td> </tr> <tr> <td>size</td> <td>Icon size</td> <td><em>number | string</em></td> <td><code>30px</code></td> </tr> <tr> <td>text-size</td> <td>Text font size</td> <td><em>number | string</em></td> <td><code>14px</code></td> </tr> <tr> <td>vertical</td> <td>Whether to arrange icons and text content vertically</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> </tbody></table> <h3 id="less-variables">Less Variables</h3> <p>How to use: <a href="#/en-US/theme">Custom Theme</a>.</p> <table> <thead> <tr> <th>Name</th> <th>Default Value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>@loading-text-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@loading-text-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@loading-spinner-color</td> <td><code>@gray-5</code></td> <td>-</td> </tr> <tr> <td>@loading-spinner-size</td> <td><code>30px</code></td> <td>-</td> </tr> <tr> <td>@loading-spinner-animation-duration</td> <td><code>0.8s</code></td> <td>-</td> </tr> </tbody></table> '},176:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="internationalization">Internationalization</h1> <h3 id="intro">Intro</h3> <p>Nnx-Vant uses Chinese as the default language. If you want to use other languages, please follow the instructions below.</p> <h2 id="usage">Usage</h2> <pre><code class="language-js">import { BrowserModule } from &#39;@angular/platform-browser&#39;;\nimport { NgModule } from &#39;@angular/core&#39;;\n\nimport { AppRoutingModule } from &#39;./app-routing.module&#39;;\nimport { AppComponent } from &#39;./app.component&#39;;\nimport { Vant18nModule, VANT_I18N, zh_CN } from &#39;ngx-vant/i18n&#39;;\n\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [BrowserModule, AppRoutingModule],\n    providers: [{ provide: VANT_I18N, useValue: zh_CN }],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}</code></pre> <pre><code class="language-js">import { Component } from &#39;@angular/core&#39;;\nimport { en_US, zh_CN } from &#39;ngx-vant/i18n&#39;;\nimport { VantI18nService } from &#39;ngx-vant/i18n&#39;;\n\n@Component({\n    selector: &#39;app&#39;,\n    templateUrl: &#39;./demo.component.html&#39;\n})\nexport class AppComponent {\n    constructor(\n        private vantI18n: VantI18nService,\n    ) { }\n\n    onSwitchLang() {\n        this.vantI18n.setLocale(lang);\n    }\n}</code></pre> <h3 id="config-files">Config files</h3> <p>Current supported languages:</p> <table> <thead> <tr> <th>Language</th> <th>Filename</th> </tr> </thead> <tbody><tr> <td>Chinese</td> <td>zh-CN</td> </tr> <tr> <td>Traditional Chinese (HK)</td> <td>zh-HK</td> </tr> <tr> <td>Traditional Chinese (TW)</td> <td>zh-TW</td> </tr> <tr> <td>English</td> <td>en-US</td> </tr> <tr> <td>German</td> <td>de-DE</td> </tr> <tr> <td>German (formal)</td> <td>de-DE-formal</td> </tr> <tr> <td>Norwegian</td> <td>nb-NO</td> </tr> <tr> <td>Japanese</td> <td>ja-JP</td> </tr> <tr> <td>Romanian</td> <td>ro-RO</td> </tr> <tr> <td>Spanish (Spain)</td> <td>es-ES</td> </tr> <tr> <td>Turkish</td> <td>tr-TR</td> </tr> </tbody></table> <blockquote> <p>View all language configs <a href="https://github.com/youzan/vant/tree/dev/src/locale/lang">Here</a>.</p> </blockquote> '},6944:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="notify">Notify</h1> <h3 id="install">Install</h3> <pre><code class="language-js">import NotifyModule from &#39;ngx-vant/notify&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="basic-usage">Basic Usage</h3> <pre><code class="language-js">import { Component, OnInit } from &#39;@angular/core&#39;;\nimport { NotifyService } from &#39;VantModule/notify/notify.service&#39;;\n@Component({\n    selector: &#39;app-notify&#39;,\n    template:`\n        &lt;van-cell\n            title=&quot;Basic Usage&quot;\n            [isLink]=&quot;true&quot;\n            (click)=&quot;baseClick()&quot;\n        &gt;&lt;/van-cell&gt;\n    `\n})\nexport class NotifyComponent implements OnInit {\n    constructor(private notifyService: NotifyService) { }\n    ngOnInit() {}\n    baseClick() {\n        this.notifyService.create({\n            type: &#39;danger&#39;,\n            message: &#39;Notify Message &#39;,\n            duration: 3000,\n            color: &#39;white&#39;,\n            background: &#39;&#39;\n        })\n    }\n}</code></pre> <h3 id="notify-type">Notify Type</h3> <pre><code class="language-js">import { Component, OnInit } from &#39;@angular/core&#39;;\nimport { NotifyService } from &#39;VantModule/notify/notify.service&#39;;\n@Component({\n    selector: &#39;app-notify&#39;,\n    template:`\n        &lt;van-cell\n            title=&quot;primary&quot;\n            [isLink]=&quot;true&quot;\n            (click)=&quot;primaryClick()&quot;\n        &gt;&lt;/van-cell&gt;\n        &lt;van-cell\n            title=&quot;success&quot;\n            [isLink]=&quot;true&quot;\n            (click)=&quot;successClick()&quot;\n        &gt;&lt;/van-cell&gt;\n        &lt;van-cell\n            title=&quot;danger&quot;\n            [isLink]=&quot;true&quot;\n            (click)=&quot;dangerClick()&quot;\n        &gt;&lt;/van-cell&gt;\n        &lt;van-cell\n            title=&quot;warning&quot;\n            [isLink]=&quot;true&quot;\n            (click)=&quot;warningClick()&quot;\n        &gt;&lt;/van-cell&gt;\n    `\n})\nexport class NotifyComponent implements OnInit {\n    constructor(private notifyService: NotifyService) { }\n    ngOnInit() { }\n    this.notifyService.primary({\n        message: &#39;primary &#39;,\n        duration: 3000,\n        color: &#39;white&#39;,\n        background: &#39;&#39;\n    })\n    successClick() {\n        this.notifyService.success({\n            message: &#39;success &#39;,\n            duration: 3000,\n            color: &#39;white&#39;,\n            background: &#39;&#39;\n        })\n    }\n    dangerClick() {\n        this.notifyService.danger({\n            message: &#39;danger &#39;,\n            duration: 3000,\n            color: &#39;white&#39;,\n            background: &#39;&#39;\n        })\n    }\n    warningClick() {\n        this.notifyService.warning({\n            message: &#39;warning &#39;,\n            duration: 3000,\n            color: &#39;white&#39;,\n            background: &#39;&#39;\n        })\n    }\n}</code></pre> <h3 id="custom-notify">Custom Notify</h3> <pre><code class="language-js">import { Component, OnInit } from &#39;@angular/core&#39;;\nimport { NotifyService } from &#39;VantModule/notify/notify.service&#39;;\n@Component({\n    selector: &#39;app-notify&#39;,\n    template:`\n       &lt;van-cell\n            title=&quot;Custom Color&quot;\n            [isLink]=&quot;true&quot;\n            (click)=&quot;customStyleClick()&quot;\n        &gt;&lt;/van-cell&gt;\n        &lt;van-cell\n            title=&quot;Custom Duration&quot;\n            [isLink]=&quot;true&quot;\n            (click)=&quot;customDurationClick()&quot;\n        &gt;&lt;/van-cell&gt;\n    `\n})\nexport class NotifyComponent implements OnInit {\n    constructor(private notifyService: NotifyService) { }\n    ngOnInit() {}\n    customStyleClick() {\n        this.notifyService.create({\n            type: &#39;danger&#39;,\n            message: &#39;Custom Color &#39;, duration: 3000,\n            color: &#39;#ad0000&#39;,\n            background: &#39;#ffe1e1&#39;\n        })\n    }\n    customDurationClick() {\n        this.notifyService.create({\n            type: &#39;danger&#39;,\n            message: &#39;Custom Duration &#39;,\n            duration: 1000,\n            color: &#39;white&#39;,\n            background: &#39;&#39;\n        })\n    }\n}\n</code></pre> <h2 id="api">API</h2> <h3 id="methods">Methods</h3> <table> <thead> <tr> <th>Methods</th> <th>Attribute</th> <th>Return value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>NotifyService</td> <td>`options</td> <td>message`</td> <td>notify instance</td> </tr> <tr> <td>NotifyService.close</td> <td>-</td> <td><code>void</code></td> <td>Close notify</td> </tr> </tbody></table> <h3 id="options">Options</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>type</td> <td>Can be set to <code>primary</code> <code>success</code> <code>warning</code></td> <td><em>string</em></td> <td><code>danger</code></td> </tr> <tr> <td>message</td> <td>Message</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>duration</td> <td>Duration(ms), won&#39;t disappear if value is 0</td> <td><em>number | string</em></td> <td><code>3000</code></td> </tr> <tr> <td>color</td> <td>Message color</td> <td><em>string</em></td> <td><code>white</code></td> </tr> <tr> <td>background</td> <td>Background color</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>className</td> <td>Custom className</td> <td><em>any</em></td> <td>-</td> </tr> <tr> <td>onClick</td> <td>Callback function after click</td> <td><em>Function</em></td> <td>-</td> </tr> <tr> <td>onOpened</td> <td>Callback function after opened</td> <td><em>Function</em></td> <td>-</td> </tr> <tr> <td>onClose</td> <td>Callback function after close</td> <td><em>Function</em></td> <td>-</td> </tr> </tbody></table> <h3 id="less-variables">Less Variables</h3> <p>How to use: <a href="#/en-US/theme">Custom Theme</a>.</p> <table> <thead> <tr> <th>Name</th> <th>Default Value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>@notify-text-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@notify-padding</td> <td><code>@padding-xs @padding-md</code></td> <td>-</td> </tr> <tr> <td>@notify-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@notify-line-height</td> <td><code>@line-height-md</code></td> <td>-</td> </tr> <tr> <td>@notify-primary-background-color</td> <td><code>@blue</code></td> <td>-</td> </tr> <tr> <td>@notify-success-background-color</td> <td><code>@green</code></td> <td>-</td> </tr> <tr> <td>@notify-danger-background-color</td> <td><code>@red</code></td> <td>-</td> </tr> <tr> <td>@notify-warning-background-color</td> <td><code>@orange</code></td> <td>-</td> </tr> </tbody></table> '},8432:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="picker">Picker</h1> <h3 id="intro">Intro</h3> <p>The Picker component is usually used with <a href="#/en-US/popup">Popup</a> Component.</p> <h3 id="install">Install</h3> <pre><code class="language-js">import PickerModule from &#39;ngx-vant/picker&#39;;</code></pre> <h2 id="usage">Usage</h2> <h3 id="basic-usage">Basic Usage</h3> <pre><code class="language-js">import { Component, OnInit } from &#39;@angular/core&#39;;\n\n@Component({\n    selector: &#39;app-picker&#39;,\n    template: `\n        &lt;van-picker\n            title=&#39;Title&#39;\n            [showToolbar]=&#39;true&#39;\n            [columns]=&#39;columns&#39;\n            (cancel)=&quot;onCancel($event)&quot;\n            (confirm)=&quot;onConfirm($event)&quot;\n        &gt;&lt;/van-picker&gt;\n    `\n})\nexport class PickerComponent implements OnInit {\n\n    columns :string[] = [&#39;Delaware&#39;, &#39;Florida&#39;, &#39;Georqia&#39;, &#39;Indiana&#39;, &#39;Maine&#39;]\n\n    constructor() { }\n\n    ngOnInit() { }\n\n    onCancel(e: MouseEvent): void {\n       console.log(e)\n    }\n    onConfirm(e: MouseEvent): void {\n        console.log(e)\n    }\n\n}\n</code></pre> <h3 id="default-index">Default Index</h3> <pre><code class="language-js">import { Component, OnInit } from &#39;@angular/core&#39;;\n\n@Component({\n    selector: &#39;app-picker&#39;,\n    template: `\n        &lt;van-picker\n            title=&#39;Title&#39;\n            [defaultIndex]=&quot;2&quot;\n            [showToolbar]=&#39;true&#39;\n            [columns]=&#39;columns&#39;\n            (cancel)=&quot;onCancel($event)&quot;\n            (confirm)=&quot;onConfirm($event)&quot;\n        &gt;&lt;/van-picker&gt;\n    `\n})\nexport class PickerComponent implements OnInit {\n\n    columns :string[] = [&#39;Delaware&#39;, &#39;Florida&#39;, &#39;Georqia&#39;, &#39;Indiana&#39;, &#39;Maine&#39;]\n\n    constructor() { }\n\n    ngOnInit() { }\n\n    onCancel(e: MouseEvent): void {\n       console.log(e)\n    }\n    onConfirm(e: MouseEvent): void {\n        console.log(e)\n    }\n\n}\n</code></pre> <h3 id="multiple-columns">Multiple Columns</h3> <pre><code class="language-js">import { Component, OnInit } from &#39;@angular/core&#39;;\n\n@Component({\n    selector: &#39;app-picker&#39;,\n    template: `\n        &lt;van-picker\n            title=&#39;Title&#39;\n            [showToolbar]=&#39;true&#39;\n            [columns]=&#39;columns&#39;\n            (cancel)=&quot;onCancel($event)&quot;\n            (confirm)=&quot;onConfirm($event)&quot;\n        &gt;&lt;/van-picker&gt;\n    `\n})\nexport class PickerComponent implements OnInit {\n\n    columns :string[] = [\n        {\n            values: [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thusday&#39;, &#39;Friday&#39;],\n            defaultIndex: 2,\n        },\n        {\n            values: [&#39;Morging&#39;, &#39;Afternoon&#39;, &#39;Evening&#39;],\n            defaultIndex: 1,\n        },\n    ]\n\n    constructor() { }\n\n    ngOnInit() { }\n\n    onCancel(e: MouseEvent): void {\n       console.log(e)\n    }\n    onConfirm(e: MouseEvent): void {\n        console.log(e)\n    }\n\n}</code></pre> <h2 id="api">API</h2> <h3 id="props">Props</h3> <table> <thead> <tr> <th>Attribute</th> <th>Description</th> <th>Type</th> <th>Default</th> </tr> </thead> <tbody><tr> <td>columns</td> <td>Columns data</td> <td><em>Column[]</em></td> <td><code>[]</code></td> </tr> <tr> <td>title</td> <td>Toolbar title</td> <td><em>string</em></td> <td>-</td> </tr> <tr> <td>confirmButtonText</td> <td>Text of confirm button</td> <td><em>string</em></td> <td><code>Confirm</code></td> </tr> <tr> <td>cancelButtonText</td> <td>Text of cancel button</td> <td><em>string</em></td> <td><code>Cancel</code></td> </tr> <tr> <td>valueKey</td> <td>Key of option text</td> <td><em>string</em></td> <td><code>text</code></td> </tr> <tr> <td>toolbarPosition</td> <td>Toolbar position, cat be set to <code>bottom</code></td> <td><em>string</em></td> <td><code>top</code></td> </tr> <tr> <td>loading</td> <td>Whether to show loading prompt</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>readonly</td> <td>Whether to be readonly</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>show-toolbar</td> <td>Whether to show toolbar</td> <td><em>boolean</em></td> <td><code>false</code></td> </tr> <tr> <td>allow-html</td> <td>Whether to allow HTML in option text</td> <td><em>boolean</em></td> <td><code>true</code></td> </tr> <tr> <td>default-index</td> <td>Default value index of single column picker</td> <td><em>number | string</em></td> <td><code>0</code></td> </tr> <tr> <td>item-height</td> <td>Option height, supports <code>px</code> <code>vw</code> <code>vh</code> <code>rem</code> unit, default <code>px</code></td> <td><em>number | string</em></td> <td><code>44</code></td> </tr> <tr> <td>visible-item-count</td> <td>Count of visible columns</td> <td><em>number | string</em></td> <td><code>6</code></td> </tr> <tr> <td>swipe-duration</td> <td>Duration of the momentum animation\uff0cunit <code>ms</code></td> <td><em>number | string</em></td> <td><code>1000</code></td> </tr> </tbody></table> <h3 id="events">Events</h3> <p>Picker events will pass different parameters according to the columns are single or multiple</p> <table> <thead> <tr> <th>Event</th> <th>Description</th> <th>Arguments</th> </tr> </thead> <tbody><tr> <td>confirm</td> <td>Emitted when click confirm button</td> <td>Single column\uff1acurrent value\uff0ccurrent index<br>Multiple columns\uff1acurrent values\uff0ccurrent indexes</td> </tr> <tr> <td>cancel</td> <td>Emitted when click cancel button</td> <td>Single column\uff1acurrent value\uff0ccurrent index<br>Multiple columns\uff1acurrent values\uff0ccurrent indexes</td> </tr> </tbody></table> <h3 id="data-structure-of-column">Data Structure of Column</h3> <table> <thead> <tr> <th>Key</th> <th>Description</th> <th>Type</th> </tr> </thead> <tbody><tr> <td>values</td> <td>Value of column</td> <td><em>string[]</em></td> </tr> <tr> <td>defaultIndex</td> <td>Default value index</td> <td><em>number</em></td> </tr> <tr> <td>className</td> <td>ClassName for this column</td> <td><em>any</em></td> </tr> <tr> <td>children</td> <td>Cascade children</td> <td><em>Column</em></td> </tr> </tbody></table> \x3c!-- ### Methods\n\nUse [ref](https://vuejs.org/v2/api/#ref) to get Picker instance and call instance methods.\n\n| Name | Description | Attribute | Return value |\n| --- | --- | --- | --- |\n| getValues | Get current values of all columns | - | values |\n| setValues | Set current values of all columns | values | - |\n| getIndexes | Get current indexes of all columns | - | indexes |\n| setIndexes | Set current indexes of all columns | indexes | - |\n| getColumnValue | Get current value of the column | columnIndex | value |\n| setColumnValue | Set current value of the column | columnIndex, value | - |\n| getColumnIndex | Get current index of the column | columnIndex | optionIndex |\n| setColumnIndex | Set current index of the column | columnIndex, optionIndex | - |\n| getColumnValues | Get columns data of the column | columnIndex | values |\n| setColumnValues | Set columns data of the column | columnIndex, values | - |\n| confirm `v2.4.0` | Stop scrolling and emit confirm event | - | - | --\x3e <h3 id="less-variables">Less Variables</h3> <p>How to use: <a href="#/en-US/theme">Custom Theme</a>.</p> <table> <thead> <tr> <th>Name</th> <th>Default Value</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>@picker-background-color</td> <td><code>@white</code></td> <td>-</td> </tr> <tr> <td>@picker-toolbar-height</td> <td><code>44px</code></td> <td>-</td> </tr> <tr> <td>@picker-title-font-size</td> <td><code>@font-size-lg</code></td> <td>-</td> </tr> <tr> <td>@picker-title-line-height</td> <td><code>@line-height-md</code></td> <td>-</td> </tr> <tr> <td>@picker-action-padding</td> <td><code>0 @padding-md</code></td> <td>-</td> </tr> <tr> <td>@picker-action-font-size</td> <td><code>@font-size-md</code></td> <td>-</td> </tr> <tr> <td>@picker-confirm-action-color</td> <td><code>@text-link-color</code></td> <td>-</td> </tr> <tr> <td>@picker-cancel-action-color</td> <td><code>@gray-6</code></td> <td>-</td> </tr> <tr> <td>@picker-option-font-size</td> <td><code>@font-size-lg</code></td> <td>-</td> </tr> <tr> <td>@picker-option-text-color</td> <td><code>@black</code></td> <td>-</td> </tr> <tr> <td>@picker-option-disabled-opacity</td> <td><code>0.3</code></td> <td>-</td> </tr> <tr> <td>@picker-loading-icon-color</td> <td><code>@blue</code></td> <td>-</td> </tr> <tr> <td>@picker-loading-mask-color</td> <td><code>rgba(255, 255, 255, 0.9)</code></td> <td>-</td> </tr> </tbody></table> '},3520:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="quickstart">Quickstart</h1> <h2 id="install">Install</h2> <h3 id="npm-or-yarn">npm or yarn</h3> <pre><code class="language-js">npm i ngx-vant -S</code></pre> <h2 id="usage">Usage</h2> <h3 id="manually-import">Manually import</h3> <pre><code class="language-js">import { BrowserModule } from &quot;@angular/platform-browser&quot;;\nimport { NgModule } from &quot;@angular/core&quot;;\nimport { AppComponent } from &quot;./app.component&quot;;\nimport { ButtonModule } from &quot;ngx-vant/button&quot;;\nimport { Vant18nModule, VANT_I18N, zh_CN } from &quot;ngx-vant/i18n&quot;;\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, ButtonModule, Vant18nModule],\n  providers: [{ provide: VANT_I18N, useValue: zh_CN }],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}</code></pre> <h3 id="import-styles">Import Styles</h3> <p>Import the less stylesheet in style.less</p> <pre><code class="language-js">/* You can add global styles to this file, and also import other style files */\n@import &quot;../node_modules/ngx-vant/ngx-vant.less&quot;;</code></pre> '},3656:(c,r,d)=>{d.d(r,{Z:()=>a});const a='<h1 id="custom-theme">Custom Theme</h1> <h3 id="intro">Intro</h3> <p>Ngx-Vant use <a href="http://lesscss.org/">Less</a> as css preprocessor\uff0cyou can override the default less variables to custom theme.</p> <h3 id="less-variables">Less variables</h3> <p>There are some basic variables below, all available variables could be found in <a href="https://github.com/youzan/vant/blob/dev/src/style/var.less">var.less</a>\u3002</p> <pre><code class="language-less">// Color Palette\n@black: #000;\n@white: #fff;\n@gray-1: #f7f8fa;\n@gray-2: #f2f3f5;\n@gray-3: #ebedf0;\n@gray-4: #dcdee0;\n@gray-5: #c8c9cc;\n@gray-6: #969799;\n@gray-7: #646566;\n@gray-8: #323233;\n@red: #ee0a24;\n@blue: #1989fa;\n@orange: #ff976a;\n@orange-dark: #ed6a0c;\n@orange-light: #fffbe8;\n@green: #07c160;\n\n// Gradient Colors\n@gradient-red: linear-gradient(to right, #ff6034, #ee0a24);\n@gradient-orange: linear-gradient(to right, #ffd01e, #ff8917);\n\n// Component Colors\n@text-color: @gray-8;\n@active-color: @gray-2;\n@active-opacity: 0.7;\n@disabled-opacity: 0.5;\n@background-color: @gray-1;\n@background-color-light: #fafafa;\n@text-link-color: #576b95;\n\n// Padding\n@padding-base: 4px;\n@padding-xs: @padding-base * 2;\n@padding-sm: @padding-base * 3;\n@padding-md: @padding-base * 4;\n@padding-lg: @padding-base * 6;\n@padding-xl: @padding-base * 8;\n\n// Font\n@font-size-xs: 10px;\n@font-size-sm: 12px;\n@font-size-md: 14px;\n@font-size-lg: 16px;\n@font-weight-bold: 500;\n@line-height-xs: 14px;\n@line-height-sm: 18px;\n@line-height-md: 20px;\n@line-height-lg: 22px;\n@base-font-family: -apple-system, BlinkMacSystemFont, &#39;Helvetica Neue&#39;,\n  Helvetica, Segoe UI, Arial, Roboto, &#39;PingFang SC&#39;, &#39;miui&#39;, &#39;Hiragino Sans GB&#39;,\n  &#39;Microsoft Yahei&#39;, sans-serif;\n@price-integer-font-family: Avenir-Heavy, PingFang SC, Helvetica Neue, Arial,\n  sans-serif;\n\n// Animation\n@animation-duration-base: 0.3s;\n@animation-duration-fast: 0.2s;\n@animation-timing-function-enter: ease-out;\n@animation-timing-function-leave: ease-in;\n\n// Border\n@border-color: @gray-3;\n@border-width-base: 1px;\n@border-radius-sm: 2px;\n@border-radius-md: 4px;\n@border-radius-lg: 8px;\n@border-radius-max: 999px;</code></pre> <h2 id="how-to-custom-theme">How to custom theme</h2> <h3 id="step-1-import-less-file">Step 1: import less file</h3> <p>First you should import the less source file to your project. </p> <pre><code class="language-less">/* You can add global styles to this file, and also import other style files */\n@import  &#39;../node_modules/ngx-vant/ngx-vant.less&#39;;</code></pre> <h3 id="step-2-modify-less-variables">Step 2: modify less variables</h3> <p>Use <a href="http://lesscss.org/usage/#using-less-in-the-browser-modify-variables">modifyVars</a> provided by less.js to modify less variables:</p> <pre><code class="language-less">/* You can add global styles to this file, and also import other style files */\n@import  &#39;../node_modules/ngx-vant/ngx-vant.less&#39;;\n\n@button-primary-background-color: red;\n@button-primary-border-color: red;</code></pre> '}}]);